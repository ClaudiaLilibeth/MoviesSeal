// Generated by Dagger (https://dagger.dev).
package com.example.local.di;

import android.content.Context;
import com.example.local.repository.DataBase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDataBaseFactory implements Factory<DataBase> {
  private final AppModule module;

  private final Provider<Context> appContextProvider;

  public AppModule_ProvideDataBaseFactory(AppModule module, Provider<Context> appContextProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
  }

  @Override
  public DataBase get() {
    return provideDataBase(module, appContextProvider.get());
  }

  public static AppModule_ProvideDataBaseFactory create(AppModule module,
      Provider<Context> appContextProvider) {
    return new AppModule_ProvideDataBaseFactory(module, appContextProvider);
  }

  public static DataBase provideDataBase(AppModule instance, Context appContext) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataBase(appContext));
  }
}
